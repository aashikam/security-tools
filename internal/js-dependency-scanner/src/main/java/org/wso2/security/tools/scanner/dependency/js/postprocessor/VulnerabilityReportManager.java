/*
 *
 *   Copyright (c) 2018, WSO2 Inc., WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 * /
 */

package org.wso2.security.tools.scanner.dependency.js.postprocessor;

import org.apache.log4j.Logger;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.wso2.security.tools.scanner.dependency.js.exception.ConfigParserException;
import org.wso2.security.tools.scanner.dependency.js.exception.FileHandlerException;
import org.wso2.security.tools.scanner.dependency.js.exception.TicketCreatorException;
import org.wso2.security.tools.scanner.dependency.js.model.GitUploaderProperties;
import org.wso2.security.tools.scanner.dependency.js.reportpublisher.GitUploader;
import org.wso2.security.tools.scanner.dependency.js.reportpublisher.ReportUploader;
import org.wso2.security.tools.scanner.dependency.js.ticketcreator.TicketCreator;
import org.wso2.security.tools.scanner.dependency.js.utils.CommonUtils;
import org.wso2.security.tools.scanner.dependency.js.utils.ConfigParser;

import java.util.HashMap;

/**
 * Class to handle publishing scan report in multiple ways.
 */
public class VulnerabilityReportManager {

    private static final Logger log = Logger.getLogger(VulnerabilityReportManager.class);

    public VulnerabilityReportManager() {
    }

    /**
     * This method handle all ways to publish the output.
     *
     * @param productResponseMapper mapper for product and scan result.
     */
    public void controlReportManager(HashMap<String, String> productResponseMapper) {
        HashMap<String, String> reportFileMapper;
        // Upload JS Security scan reports to github
        reportFileMapper = executeReportUploader(productResponseMapper);
        // Create JIRA ticket
        executeTicketCreator(productResponseMapper, reportFileMapper);
    }

    /**
     * Execute the process to upload scan reports to GIT Repository.
     *
     * @param productResponseMapper Map which holds product name as key and scan response as value.
     * @return Map which holds product name as key and generated scan report file path as value.
     */
    private HashMap<String, String> executeReportUploader(HashMap<String, String> productResponseMapper) {
        GitUploaderProperties gitUploaderProperties;
        ReportUploader reportUploader;
        HashMap<String, String> reportFileMapper = null;
        try {
            log.info("[JS_SEC_DAILY_SCAN]  " + "Start uploading report to git repo.");
            gitUploaderProperties = ConfigParser.parseGitUploaderConfigProperties();
            reportUploader = new GitUploader(gitUploaderProperties);
            reportUploader.publishReport(productResponseMapper);
            reportFileMapper = reportUploader.getReportFileMapper();
            log.info("[JS_SEC_DAILY_SCAN]  " + "Successfully uploaded reports to git repo.");
        } catch (GitAPIException | FileHandlerException e) {
            log.error("Failed to upload scan reports to github. ", e);
        } catch (ConfigParserException e) {
            log.error("Failed to initialize Report Uploader", e);
        }
        return reportFileMapper;
    }

    /**
     * Execute the process to create Tickets in JIRA.
     *
     * @param productResponseMapper Map which holds product name as key and scan response as value.
     * @param reportFileMapper      Map which holds product name as key and generated scan report file path as value.
     */
    private void executeTicketCreator(HashMap<String, String> productResponseMapper,
                                      HashMap<String, String> reportFileMapper) {
        TicketCreator ticketCreator = null;
        try {
            log.info("[JS_SEC_DAILY_SCAN]  " + "Start creating JIRA tickets.");
            ticketCreator = ConfigParser.parseTicketCreatorCredentials();
            ticketCreator.handleTicketCreatorAPICall(productResponseMapper, reportFileMapper);
            log.info("[JS_SEC_DAILY_SCAN]  " + "JIRA Tickets are created successfully.");
        } catch (TicketCreatorException | ConfigParserException e) {
            log.error("Failed to create JIRA Ticket", e);
        } finally {
            if (ticketCreator != null) {
                // Username and password are filled with random numbers. This is used to discard the char array elements
                // of username and password from memory dump and refill with random numbers.
                CommonUtils.clearCredentialData(ticketCreator.getUsername(), ticketCreator.getPassword());
            }
        }
    }

}
