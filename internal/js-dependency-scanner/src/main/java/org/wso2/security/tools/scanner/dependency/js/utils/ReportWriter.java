/*
 *
 *   Copyright (c) 2018, WSO2 Inc., WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 * /
 */

package org.wso2.security.tools.scanner.dependency.js.utils;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.log4j.Logger;
import org.wso2.security.tools.scanner.dependency.js.exception.FileHandlerException;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

/**
 * Class which is responsible to Generate Reports. It writes the result generated by the particular scanner tool.
 * The content of the file will be prettify json format.
 */
public class ReportWriter {

    private static final Logger log = Logger.getLogger(ReportWriter.class);

    private ReportWriter() {
    }

    /**
     * Call writer to generate report
     *
     * @param productResponseMapper Mapper which holds value for product and response.
     * @param targetDir             Root Directory where the report is generated.
     * @return Mapper which holds product and report file path key value pair.
     * @throws FileHandlerException Exception occurred while generating report.
     */
    public static HashMap<String, String> callWriter(HashMap<String, String> productResponseMapper, File targetDir)
            throws FileHandlerException {
        String reportDesPath = targetDir.getAbsolutePath() + File.separator + java.time.LocalDate.now().toString();
        File reportDestDir = new File(reportDesPath);
        CommonUtils.createDirectory(reportDestDir);
        HashMap<String, String> reportFileMapper = new HashMap<>();
        for (Map.Entry<String, String> entry : productResponseMapper.entrySet()) {
            String path = writeFile(entry.getKey(), entry.getValue(), reportDestDir);
            reportFileMapper.put(entry.getKey(), path);
        }
        return reportFileMapper;
    }

    /**
     * Write scan result in file.
     *
     * @param name      Name of the product.
     * @param response  Scan response.
     * @param targetDir Directory where the report placed.
     * @return file path
     * @throws FileHandlerException File handler Exception.
     */
    private static String writeFile(String name, String response, File targetDir) throws FileHandlerException {
        PrintWriter writer = null;
        String currentReportFilePath;
        String indented;
        ObjectMapper mapper = new ObjectMapper();
        try {
            Object json = mapper.readValue(response, Object.class);
            indented = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json);
            currentReportFilePath = targetDir + "/" + name + "-" +
                    java.time.LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + ".json";
        } catch (IOException e) {
            throw new FileHandlerException("Failed to generate report for " + name + "." +
                    " Error occurred while formatting scan results (JSON format).", e);
        }
        try {
            writer = new PrintWriter(currentReportFilePath, "UTF-8");
            writer.write(indented);
        } catch (IOException e) {
            throw new FileHandlerException("Failed to generate report for " + name + " " + e);
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
        log.info("[JS_SEC_DAILY_SCAN] Successfully generated report for " + name);
        return currentReportFilePath;
    }

}
